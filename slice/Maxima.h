// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Maxima.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __slice_Maxima_h__
#define __slice_Maxima_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace MaximaLib
{

class MaximaWorker;

class MaximaDispatcher;

}

}

namespace MaximaLib
{

class MaximaWorker;
bool operator==(const MaximaWorker&, const MaximaWorker&);
bool operator<(const MaximaWorker&, const MaximaWorker&);

class MaximaDispatcher;
bool operator==(const MaximaDispatcher&, const MaximaDispatcher&);
bool operator<(const MaximaDispatcher&, const MaximaDispatcher&);

}

namespace IceInternal
{

::Ice::Object* upCast(::MaximaLib::MaximaWorker*);
::IceProxy::Ice::Object* upCast(::IceProxy::MaximaLib::MaximaWorker*);

::Ice::Object* upCast(::MaximaLib::MaximaDispatcher*);
::IceProxy::Ice::Object* upCast(::IceProxy::MaximaLib::MaximaDispatcher*);

}

namespace MaximaLib
{

typedef ::IceInternal::Handle< ::MaximaLib::MaximaWorker> MaximaWorkerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MaximaLib::MaximaWorker> MaximaWorkerPrx;

void __read(::IceInternal::BasicStream*, MaximaWorkerPrx&);
void __patch__MaximaWorkerPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::MaximaLib::MaximaDispatcher> MaximaDispatcherPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MaximaLib::MaximaDispatcher> MaximaDispatcherPrx;

void __read(::IceInternal::BasicStream*, MaximaDispatcherPrx&);
void __patch__MaximaDispatcherPtr(void*, ::Ice::ObjectPtr&);

}

namespace MaximaLib
{

class Callback_MaximaWorker_calculate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MaximaWorker_calculate_Base> Callback_MaximaWorker_calculatePtr;

class Callback_MaximaDispatcher_registerWorker_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MaximaDispatcher_registerWorker_Base> Callback_MaximaDispatcher_registerWorkerPtr;

class Callback_MaximaDispatcher_unregisterWorker_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MaximaDispatcher_unregisterWorker_Base> Callback_MaximaDispatcher_unregisterWorkerPtr;

class Callback_MaximaDispatcher_calculate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MaximaDispatcher_calculate_Base> Callback_MaximaDispatcher_calculatePtr;

}

namespace IceProxy
{

namespace MaximaLib
{

class MaximaWorker : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string calculate(const ::std::string& s)
    {
        return calculate(s, 0);
    }
    ::std::string calculate(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        return calculate(s, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s)
    {
        return begin_calculate(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        return begin_calculate(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::MaximaLib::Callback_MaximaWorker_calculatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::Context& __ctx, const ::MaximaLib::Callback_MaximaWorker_calculatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, &__ctx, __del, __cookie);
    }

    ::std::string end_calculate(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string calculate(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_calculate(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaWorker> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaWorker*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MaximaWorker*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MaximaDispatcher : virtual public ::IceProxy::Ice::Object
{
public:

    void registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker)
    {
        registerWorker(worker, 0);
    }
    void registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx)
    {
        registerWorker(worker, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker)
    {
        return begin_registerWorker(worker, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx)
    {
        return begin_registerWorker(worker, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWorker(worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWorker(worker, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::MaximaLib::Callback_MaximaDispatcher_registerWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWorker(worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx, const ::MaximaLib::Callback_MaximaDispatcher_registerWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWorker(worker, &__ctx, __del, __cookie);
    }

    void end_registerWorker(const ::Ice::AsyncResultPtr&);
    
private:

    void registerWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker)
    {
        unregisterWorker(worker, 0);
    }
    void unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx)
    {
        unregisterWorker(worker, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker)
    {
        return begin_unregisterWorker(worker, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx)
    {
        return begin_unregisterWorker(worker, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterWorker(worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterWorker(worker, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::MaximaLib::Callback_MaximaDispatcher_unregisterWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterWorker(worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterWorker(const ::MaximaLib::MaximaWorkerPrx& worker, const ::Ice::Context& __ctx, const ::MaximaLib::Callback_MaximaDispatcher_unregisterWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterWorker(worker, &__ctx, __del, __cookie);
    }

    void end_unregisterWorker(const ::Ice::AsyncResultPtr&);
    
private:

    void unregisterWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unregisterWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string calculate(const ::std::string& s)
    {
        return calculate(s, 0);
    }
    ::std::string calculate(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        return calculate(s, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s)
    {
        return begin_calculate(s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::Context& __ctx)
    {
        return begin_calculate(s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::MaximaLib::Callback_MaximaDispatcher_calculatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_calculate(const ::std::string& s, const ::Ice::Context& __ctx, const ::MaximaLib::Callback_MaximaDispatcher_calculatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_calculate(s, &__ctx, __del, __cookie);
    }

    ::std::string end_calculate(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string calculate(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_calculate(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<MaximaDispatcher> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<MaximaDispatcher*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<MaximaDispatcher*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace MaximaLib
{

class MaximaWorker : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Context*) = 0;
};

class MaximaDispatcher : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void registerWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*) = 0;

    virtual void unregisterWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*) = 0;

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace MaximaLib
{

class MaximaWorker : virtual public ::IceDelegate::MaximaLib::MaximaWorker,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Context*);
};

class MaximaDispatcher : virtual public ::IceDelegate::MaximaLib::MaximaDispatcher,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void registerWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*);

    virtual void unregisterWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*);

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace MaximaLib
{

class MaximaWorker : virtual public ::IceDelegate::MaximaLib::MaximaWorker,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Context*);
};

class MaximaDispatcher : virtual public ::IceDelegate::MaximaLib::MaximaDispatcher,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void registerWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*);

    virtual void unregisterWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Context*);

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Context*);
};

}

}

namespace MaximaLib
{

class MaximaWorker : virtual public ::Ice::Object
{
public:

    typedef MaximaWorkerPrx ProxyType;
    typedef MaximaWorkerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___calculate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const MaximaWorker& l, const MaximaWorker& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MaximaWorker& l, const MaximaWorker& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MaximaDispatcher : virtual public ::Ice::Object
{
public:

    typedef MaximaDispatcherPrx ProxyType;
    typedef MaximaDispatcherPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void registerWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerWorker(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unregisterWorker(const ::MaximaLib::MaximaWorkerPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unregisterWorker(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string calculate(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___calculate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const MaximaDispatcher& l, const MaximaDispatcher& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MaximaDispatcher& l, const MaximaDispatcher& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace MaximaLib
{

template<class T>
class CallbackNC_MaximaWorker_calculate : public Callback_MaximaWorker_calculate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MaximaWorker_calculate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MaximaLib::MaximaWorkerPrx __proxy = ::MaximaLib::MaximaWorkerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_calculate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MaximaWorker_calculatePtr
newCallback_MaximaWorker_calculate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaWorker_calculate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MaximaWorker_calculatePtr
newCallback_MaximaWorker_calculate(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaWorker_calculate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MaximaWorker_calculate : public Callback_MaximaWorker_calculate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MaximaWorker_calculate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MaximaLib::MaximaWorkerPrx __proxy = ::MaximaLib::MaximaWorkerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_calculate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MaximaWorker_calculatePtr
newCallback_MaximaWorker_calculate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaWorker_calculate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaWorker_calculatePtr
newCallback_MaximaWorker_calculate(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaWorker_calculate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MaximaDispatcher_registerWorker : public Callback_MaximaDispatcher_registerWorker_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MaximaDispatcher_registerWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_registerWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_registerWorker<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_registerWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_registerWorker<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MaximaDispatcher_registerWorker : public Callback_MaximaDispatcher_registerWorker_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MaximaDispatcher_registerWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_registerWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_registerWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_registerWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaDispatcher_registerWorkerPtr
newCallback_MaximaDispatcher_registerWorker(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_registerWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MaximaDispatcher_unregisterWorker : public Callback_MaximaDispatcher_unregisterWorker_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MaximaDispatcher_unregisterWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_unregisterWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_unregisterWorker<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_unregisterWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_unregisterWorker<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MaximaDispatcher_unregisterWorker : public Callback_MaximaDispatcher_unregisterWorker_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MaximaDispatcher_unregisterWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_unregisterWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_unregisterWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_unregisterWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaDispatcher_unregisterWorkerPtr
newCallback_MaximaDispatcher_unregisterWorker(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_unregisterWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MaximaDispatcher_calculate : public Callback_MaximaDispatcher_calculate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_MaximaDispatcher_calculate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MaximaLib::MaximaDispatcherPrx __proxy = ::MaximaLib::MaximaDispatcherPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_calculate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_MaximaDispatcher_calculatePtr
newCallback_MaximaDispatcher_calculate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_calculate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MaximaDispatcher_calculatePtr
newCallback_MaximaDispatcher_calculate(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MaximaDispatcher_calculate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MaximaDispatcher_calculate : public Callback_MaximaDispatcher_calculate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_MaximaDispatcher_calculate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MaximaLib::MaximaDispatcherPrx __proxy = ::MaximaLib::MaximaDispatcherPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_calculate(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_MaximaDispatcher_calculatePtr
newCallback_MaximaDispatcher_calculate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_calculate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MaximaDispatcher_calculatePtr
newCallback_MaximaDispatcher_calculate(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MaximaDispatcher_calculate<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
